<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/akshayanallathambi/Downloads/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1597"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="75"/><column index="2" value="250"/><column index="3" value="218"/><column index="4" value="99"/><column index="5" value="89"/><column index="6" value="56"/><column index="7" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Query 1">-- 1. Write a query to Display the product details (product_class_code, product_id, product_desc, product_price,) 
-- as per the following criteria and sort them in descending order of category: 
-- a. If the category is 2050, increase the price by 2000 
-- b. If the category is 2051, increase the price by 500 
-- c. If the category is 2052, increase the price by 600. 
-- Hint: Use case statement. no permanent change in table required. (60 ROWS) [NOTE: PRODUCT TABLE]

select distinct PRODUCT_CLASS_CODE, PRODUCT_ID, PRODUCT_DESC, 
case when PRODUCT_CLASS_CODE = 2050 then PRODUCT_PRICE + 2000
	 when PRODUCT_CLASS_CODE = 2051 then PRODUCT_PRICE + 500
	 when PRODUCT_CLASS_CODE = 2052 then PRODUCT_PRICE + 600
	 else PRODUCT_PRICE END as PRODUCT_PRICE
from PRODUCT
order by PRODUCT_CLASS_CODE desc,2;



</sql><sql name="Query 2">-- 2. Write a query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) and 
-- Show inventory status of products as below as per their available quantity: 
-- a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, 
-- show 'In stock', &gt;= 31, show 'Enough stock' 
-- b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;= 80, show 'In stock', &gt;= 81, show 'Enough stock' 
-- c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock' For all categories, 
-- if available quantity is 0, show 'Out of stock'. 
-- Hint: Use case statement. (60 ROWS) [NOTE: TABLES TO BE USED – product, product_class]

SELECT distinct 
pc.PRODUCT_CLASS_DESC, p.PRODUCT_ID, p.PRODUCT_DESC, p.PRODUCT_QUANTITY_AVAIL,
		case when p.product_quantity_avail = 0 then 'Out of stock' 
     when pc.product_class_desc in ('Electronics','Computer') then
          case when p.product_quantity_avail &lt;= 10 then 'Low stock'
               when p.product_quantity_avail between 11 and 30 then 'In stock'
               when p.product_quantity_avail &gt;= 31 THEN 'Enough stock' 
          end
	when pc.product_class_desc in ('Stationery','Clothes') then
          case when p.product_quantity_avail &lt;= 20 then 'Low stock'
               when p.product_quantity_avail between 21 and 80 then 'In stock'
               when p.product_quantity_avail &gt;= 81 THEN 'Enough stock' 
          end	 
		  ELSE
		  case when p.product_quantity_avail &lt;= 15 then 'Low stock'
               when p.product_quantity_avail between 16 and 50 then 'In stock'
               when p.product_quantity_avail &gt;= 51 THEN 'Enough stock' 
          END
		
		END as StockDetails
from PRODUCT P, PRODUCT_CLASS PC
where p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE;
</sql><sql name="Query 3">-- 3. Write a query to show the number of cities in all countries other than USA &amp; MALAYSIA, 
-- with more than 1 city, in the descending order of CITIES. (2 rows) [NOTE: ADDRESS TABLE]

select count(city) as COUNT, country from address 
where country not in ('USA','Malaysia')
group by country
having count(city) &gt; 1
order by 1 desc;
</sql><sql name="Query 4">-- 4. Write a query to display the customer_id,customer full name ,city,pincode,and order details 
-- (order id, product class desc, product desc, subtotal(product_quantity * product_price)) for orders shipped to cities 
-- whose pin codes do not have any 0s in them. Sort the output on customer name and subtotal. (52 ROWS) 
-- [NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items, product, product_class]

SELECT DISTINCT OC.CUSTOMER_ID, OC.CUSTOMER_FNAME||' '||OC.CUSTOMER_LNAME as CUSTOMER_FULLNAME, A.CITY, A.PINCODE, 
OH.ORDER_ID, PC.PRODUCT_CLASS_DESC, P.PRODUCT_DESC, OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE as subtotal
from ONLINE_CUSTOMER OC, ADDRESS A, ORDER_HEADER OH, ORDER_ITEMS OI, PRODUCT P, PRODUCT_CLASS PC, SHIPPER S
WHERE OC.CUSTOMER_ID = OH.CUSTOMER_ID
AND OC.ADDRESS_ID = A.ADDRESS_ID 
AND PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE 
AND P.PRODUCT_ID = OI.PRODUCT_ID 
AND OH.ORDER_ID = OI.ORDER_ID 
AND OH.ORDER_STATUS = 'Shipped'
AND A.PINCODE NOT LIKE '%0%'
ORDER BY 2,8;
</sql><sql name="Query 5">-- 5. Write a Query to display product id,product description,totalquantity(sum(product quantity) 
-- for a given item whose product id is 201 and which item has been bought along with it maximum no. of times. 
-- Display only one record which has the maximum value for total quantity in this scenario. 
-- (USE SUB-QUERY)(1 ROW)[NOTE : ORDER_ITEMS TABLE,PRODUCT TABLE]

SELECT DISTINCT P.PRODUCT_ID,P.PRODUCT_DESC,
SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QTY FROM ORDER_ITEMS OI, PRODUCT P 
WHERE OI.PRODUCT_ID = P.PRODUCT_ID 
AND OI.ORDER_ID IN (SELECT DISTINCT OI.ORDER_ID FROM ORDER_ITEMS OI WHERE OI.PRODUCT_ID = 201) 
GROUP BY OI.ORDER_ID ORDER BY 3 DESC LIMIT 1;
</sql><sql name="Query 6">-- 6. Write a query to display the customer_id,customer name, email and order details 
-- (order id, product desc,product qty, subtotal(product_quantity * product_price)) 
-- for all customers even if they have not ordered any item.(225 ROWS) 
-- [NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]

SELECT DISTINCT 
OC.CUSTOMER_ID,(OC.CUSTOMER_FNAME||' '||OC.CUSTOMER_LNAME) AS CUSTOMER_NAME,
OC.CUSTOMER_EMAIL,OI.ORDER_ID,P.PRODUCT_DESC,OI.PRODUCT_QUANTITY,
(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) AS SUBTOTAL 
FROM ONLINE_CUSTOMER OC 
LEFT JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID 
LEFT JOIN PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID;
</sql><sql name="Query 7">-- 7. Write a query to display carton id, (len*width*height) as carton_vol and identify the optimum carton
-- (carton with the least volume whose volume is greater than the total volume of all items (len * width * height * product_quantity))
-- for a given order whose order id is 10006, Assume all items of an order are packed into one single carton (box). (1 ROW)
-- [NOTE: CARTON TABLE]

SELECT DISTINCT C.CARTON_ID, MIN(C.LEN * C.WIDTH * C.HEIGHT) AS CARTON_VOL
FROM CARTON C
WHERE C.LEN * C.WIDTH * C.HEIGHT &gt;
(SELECT DISTINCT SUM(OI.PRODUCT_QUANTITY * P.LEN * P.WIDTH * P.HEIGHT) FROM ORDER_ITEMS OI, PRODUCT P WHERE P.PRODUCT_ID = OI.PRODUCT_ID
AND OI.ORDER_ID = 10006) ORDER BY 1;
</sql><sql name="Query 8">-- 8. Write a query to display details (customer id,customer fullname,order id,product quantity) of customers who bought 
-- more than ten (i.e. total order qty) products per shipped order. (11 ROWS) 
-- [NOTE: TABLES TO BE USED - online_customer, order_header, order_items,]

SELECT DISTINCT OC.CUSTOMER_ID, OC.CUSTOMER_FNAME||' '||OC.CUSTOMER_LNAME AS CUSTOMER_NAME,
OH.ORDER_ID, SUM(OI.PRODUCT_QUANTITY) AS TOTAL_PRODUCT
FROM ONLINE_CUSTOMER OC, ORDER_HEADER OH, ORDER_ITEMS OI
WHERE OC.CUSTOMER_ID = OH.CUSTOMER_ID
AND OH.ORDER_ID = OI.ORDER_ID 
AND OH.ORDER_STATUS = 'Shipped'
GROUP BY OH.ORDER_ID
HAVING SUM(OI.PRODUCT_QUANTITY) &gt; 10
ORDER BY 1;

</sql><sql name="Query 9">-- 9. Write a query to display the order_id, customer id and cutomer full name of customers along with (product_quantity) 
-- as total quantity of products shipped for order ids &gt; 10060. (6 ROWS) 
-- [NOTE: TABLES TO BE USED - online_customer, order_header, order_items]

SELECT DISTINCT OH.ORDER_ID, OC.CUSTOMER_ID, OC.CUSTOMER_FNAME||' '||OC.CUSTOMER_LNAME AS CUSTOMER_NAME,
SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
FROM ONLINE_CUSTOMER OC, ORDER_HEADER OH, ORDER_ITEMS OI
WHERE OC.CUSTOMER_ID = OH.CUSTOMER_ID
AND OH.ORDER_ID = OI.ORDER_ID
AND OH.ORDER_STATUS = 'Shipped'
AND OH.ORDER_ID &gt; 10060
GROUP BY OH.ORDER_ID
ORDER BY 1;
</sql><sql name="Query 10">-- 10. Write a query to display product class description ,total quantity (sum(product_quantity),Total value (product_quantity * product price) 
-- and show which class of products have been shipped highest(Quantity) to countries outside India other than USA? Also show the total value of those items. (1 ROWS)
-- [NOTE:PRODUCT TABLE,ADDRESS TABLE,ONLINE_CUSTOMER TABLE,ORDER_HEADER TABLE,ORDER_ITEMS TABLE,PRODUCT_CLASS TABLE]

SELECT DISTINCT PC.PRODUCT_CLASS_DESC, SUM(OI.PRODUCT_QUANTITY) AS TOTAL_PROD_QTY,
(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) AS TOTAL_VALUE
FROM PRODUCT P, ADDRESS A, ONLINE_CUSTOMER OC, ORDER_HEADER OH, ORDER_ITEMS OI, PRODUCT_CLASS PC
WHERE OC.CUSTOMER_ID = OH.CUSTOMER_ID
AND OH.ORDER_ID = OI.ORDER_ID
AND OC.ADDRESS_ID = A.ADDRESS_ID
AND OI.PRODUCT_ID = P.PRODUCT_ID
AND P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
AND A.COUNTRY NOT IN ('India','USA')
GROUP BY PC.PRODUCT_CLASS_DESC
ORDER BY 2 DESC LIMIT 1;
</sql><current_tab id="9"/></tab_sql></sqlb_project>
